package Arrays;

import java.lang.reflect.Array;
import java.util.HashSet;

public class GeeksForGeeks {
	
	public int[] generateRandomArray(int arraySize){
		int[] theArray = new int[arraySize];
		for(int i=0; i<arraySize; i++){
			theArray[i] = (int)(Math.random()*10)+10;
		}
		return theArray;
	}
	
	public void print(int[] a){
		for (int i=0; i<a.length; i++){
			System.out.print(" " + a[i] + " |");
		}
	}
	/**
	 * Question1: 
	 * Given an unsorted array that may contain duplicates. Also given a number k which 
		is smaller than size of array. Write a function that returns true if array contains 
		duplicates within k distance.
		
		Solution:
		We are approaching with iterating till K  and adding the values to the set
		here the time complexity is O(K) and auxiliary space complexity is O(k)
	 */
	
	public boolean duplicateValue(int[] a, int k){
		HashSet<Integer> set = new HashSet<Integer>();
		for(int i=0; i<k; i++){
			if(set.contains(a[i]))
				return true;
			else{
				set.add(a[i]);
			}
			
		}
		
		return false;
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		GeeksForGeeks g = new GeeksForGeeks();
		int[] arr;
		arr = g.generateRandomArray(10);
		g.print(arr);
		System.out.println(g.duplicateValue(arr, 3));

	}

}
